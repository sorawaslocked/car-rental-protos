name: Generate Protobuf Files

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'proto/**/*.proto'
  pull_request:
    paths:
      - 'proto/**/*.proto'
  workflow_dispatch:

jobs:
  generate-proto:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Protocol Buffers
        run: |
          PROTOC_VERSION=25.1
          wget https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip
          unzip protoc-${PROTOC_VERSION}-linux-x86_64.zip -d $HOME/protoc
          echo "$HOME/protoc/bin" >> $GITHUB_PATH

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Go protobuf plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Create gen directory structure
        run: |
          mkdir -p gen

      - name: Generate Go protobuf files
        run: |
          find proto -name "*.proto" | while read proto_file; do
            # Get the relative path from proto directory
            rel_path=${proto_file#proto/}
            dir_path=$(dirname "$rel_path")
          
            mkdir -p "gen/$dir_path"
          
            protoc \
              --proto_path=proto \
              --go_out=gen \
              --go_opt=paths=source_relative \
              --go-grpc_out=gen \
              --go-grpc_opt=paths=source_relative \
              "$proto_file"
          done

      - name: Tidy Go modules
        run: |
          go mod tidy

      - name: Commit generated files
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add gen/
          git add go.mod go.sum
          
          echo "Files to be committed:"
          git diff --staged --name-only
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Regenerate protobuf files [skip ci]"
            echo "Changes committed successfully"
          fi

      - name: Push changes
        run: |
          # Check if there are commits to push
          if git diff origin/main --quiet; then
            echo "No changes to push"
          else
            echo "Pushing changes..."
            git push
          fi